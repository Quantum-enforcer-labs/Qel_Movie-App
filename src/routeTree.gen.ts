/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TvshowsImport } from './routes/tvshows'
import { Route as SearchImport } from './routes/search'
import { Route as MoviesImport } from './routes/movies'
import { Route as FavouritesImport } from './routes/favourites'
import { Route as IndexImport } from './routes/index'
import { Route as TvshowTvShowIdImport } from './routes/tvshow/$tvShowId'
import { Route as MovieMovieIdImport } from './routes/movie/$movieId'

// Create/Update Routes

const TvshowsRoute = TvshowsImport.update({
  id: '/tvshows',
  path: '/tvshows',
  getParentRoute: () => rootRoute,
} as any)

const SearchRoute = SearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const MoviesRoute = MoviesImport.update({
  id: '/movies',
  path: '/movies',
  getParentRoute: () => rootRoute,
} as any)

const FavouritesRoute = FavouritesImport.update({
  id: '/favourites',
  path: '/favourites',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TvshowTvShowIdRoute = TvshowTvShowIdImport.update({
  id: '/tvshow/$tvShowId',
  path: '/tvshow/$tvShowId',
  getParentRoute: () => rootRoute,
} as any)

const MovieMovieIdRoute = MovieMovieIdImport.update({
  id: '/movie/$movieId',
  path: '/movie/$movieId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/favourites': {
      id: '/favourites'
      path: '/favourites'
      fullPath: '/favourites'
      preLoaderRoute: typeof FavouritesImport
      parentRoute: typeof rootRoute
    }
    '/movies': {
      id: '/movies'
      path: '/movies'
      fullPath: '/movies'
      preLoaderRoute: typeof MoviesImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
    '/tvshows': {
      id: '/tvshows'
      path: '/tvshows'
      fullPath: '/tvshows'
      preLoaderRoute: typeof TvshowsImport
      parentRoute: typeof rootRoute
    }
    '/movie/$movieId': {
      id: '/movie/$movieId'
      path: '/movie/$movieId'
      fullPath: '/movie/$movieId'
      preLoaderRoute: typeof MovieMovieIdImport
      parentRoute: typeof rootRoute
    }
    '/tvshow/$tvShowId': {
      id: '/tvshow/$tvShowId'
      path: '/tvshow/$tvShowId'
      fullPath: '/tvshow/$tvShowId'
      preLoaderRoute: typeof TvshowTvShowIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/favourites': typeof FavouritesRoute
  '/movies': typeof MoviesRoute
  '/search': typeof SearchRoute
  '/tvshows': typeof TvshowsRoute
  '/movie/$movieId': typeof MovieMovieIdRoute
  '/tvshow/$tvShowId': typeof TvshowTvShowIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/favourites': typeof FavouritesRoute
  '/movies': typeof MoviesRoute
  '/search': typeof SearchRoute
  '/tvshows': typeof TvshowsRoute
  '/movie/$movieId': typeof MovieMovieIdRoute
  '/tvshow/$tvShowId': typeof TvshowTvShowIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/favourites': typeof FavouritesRoute
  '/movies': typeof MoviesRoute
  '/search': typeof SearchRoute
  '/tvshows': typeof TvshowsRoute
  '/movie/$movieId': typeof MovieMovieIdRoute
  '/tvshow/$tvShowId': typeof TvshowTvShowIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/favourites'
    | '/movies'
    | '/search'
    | '/tvshows'
    | '/movie/$movieId'
    | '/tvshow/$tvShowId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/favourites'
    | '/movies'
    | '/search'
    | '/tvshows'
    | '/movie/$movieId'
    | '/tvshow/$tvShowId'
  id:
    | '__root__'
    | '/'
    | '/favourites'
    | '/movies'
    | '/search'
    | '/tvshows'
    | '/movie/$movieId'
    | '/tvshow/$tvShowId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FavouritesRoute: typeof FavouritesRoute
  MoviesRoute: typeof MoviesRoute
  SearchRoute: typeof SearchRoute
  TvshowsRoute: typeof TvshowsRoute
  MovieMovieIdRoute: typeof MovieMovieIdRoute
  TvshowTvShowIdRoute: typeof TvshowTvShowIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FavouritesRoute: FavouritesRoute,
  MoviesRoute: MoviesRoute,
  SearchRoute: SearchRoute,
  TvshowsRoute: TvshowsRoute,
  MovieMovieIdRoute: MovieMovieIdRoute,
  TvshowTvShowIdRoute: TvshowTvShowIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/favourites",
        "/movies",
        "/search",
        "/tvshows",
        "/movie/$movieId",
        "/tvshow/$tvShowId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/favourites": {
      "filePath": "favourites.tsx"
    },
    "/movies": {
      "filePath": "movies.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/tvshows": {
      "filePath": "tvshows.tsx"
    },
    "/movie/$movieId": {
      "filePath": "movie/$movieId.tsx"
    },
    "/tvshow/$tvShowId": {
      "filePath": "tvshow/$tvShowId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
